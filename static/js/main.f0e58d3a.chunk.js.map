{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","props","handleChangePhase","e","rowIdx","formData","state","data","apiData","newData","JSON","parse","stringify","defaultTask","target","value","newPhase","description","blocked","help","undefined","push","setState","handleChangeTask","phase","handleChangeDescription","task","status","handleChangeStatus","renderRow","rowData","rowPhase","Object","keys","rowTask","rowStatus","tasks","key","className","id","name","onChange","map","i","style","resize","type","checked","this","disabled","length","renderNewRow","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0e58d3a.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport apiData from './apiData.json'\nimport './App.css';\n\nexport interface IState {\n  formData: IPhase[] \n}\n\nexport interface IPhase {\n  [phase: string]: ITask\n}\n\ninterface ITask {\n  [task: string]: IStatus\n}\n\ninterface IStatus {\n  [status: string]: string | boolean\n}\n\ninterface IData {\n  [key: string]: string[]\n}\n\nclass App extends React.Component<IState, IState> {\n  constructor(props: IState) {\n    super(props);\n    this.state = props;\n  }\n\n  handleChangePhase = (e: ChangeEvent<HTMLSelectElement>, rowIdx?: number) => {\n    const { formData } = this.state;\n    const data = apiData as IData;\n\n    let newData = JSON.parse(JSON.stringify(formData));\n    const defaultTask = data[e.target.value][0];\n    const defaultStatus = {description: '', blocked: false, help: false};\n    const newPhase = {[e.target.value]: {[defaultTask]: defaultStatus}};\n\n    if (rowIdx !== undefined) {\n      newData[rowIdx] = newPhase;\n    } else {\n      newData.push(newPhase);\n    }\n  \n    this.setState({formData: newData});\n  }\n  \n  handleChangeTask = (e: ChangeEvent<HTMLSelectElement>, rowIdx: number, phase: string) => {\n    const { formData } = this.state;\n    const defaultStatus = {description: '', blocked: false, help: false};\n\n    let newData = JSON.parse(JSON.stringify(formData));\n    newData[rowIdx][phase] = {\n      [e.target.value]: defaultStatus\n    };\n\n    this.setState({formData: newData});\n  }\n\n  handleChangeDescription = (e: ChangeEvent<HTMLTextAreaElement>, rowIdx: number, phase: string, task: string, status: string) => {\n    const { formData } = this.state;\n\n    let newData = JSON.parse(JSON.stringify(formData));\n    newData[rowIdx][phase][task][status] = e.target.value;\n\n    this.setState({formData: newData});\n  }\n\n  handleChangeStatus = (rowIdx: number, phase: string, task: string, status: string) => {\n    const { formData } = this.state;\n\n    let newData = JSON.parse(JSON.stringify(formData));\n    newData[rowIdx][phase][task][status] = !newData[rowIdx][phase][task][status];\n\n    this.setState({formData: newData});\n  }\n\n  renderNewRow() {\n    const data = apiData as IData;\n    \n    return (\n      <div className=\"row grid\">\n        <select id=\"new-phase\" name=\"new-phase\" value=\"-- Add Phase --\" onChange={this.handleChangePhase}>  \n          <option disabled>-- Add Phase --</option>\n          {Object.keys(data).map(function(key: string, i: number) {\n            return <option key={i}>{key}</option>\n          })}\n        </select>\n      </div>\n    )\n  }\n\n  renderRow = (rowData: IPhase, rowIdx: number) => {\n    const data = apiData as IData;\n    const rowPhase = Object.keys(rowData)[0];\n    const rowTask = Object.keys(rowData[rowPhase])[0];\n    const rowStatus = rowData[rowPhase][rowTask];\n    const tasks = data[rowPhase];\n\n    return (\n      <div key={rowIdx} className=\"row grid\">\n        <select id={`phase-${rowIdx}`} className={`phase-${rowIdx}`} name=\"phase\" value={rowPhase} onChange={(e) => this.handleChangePhase(e, rowIdx)}>\n          {Object.keys(data).map(function(key: string, i: number) {\n            return <option key={i}>{key}</option>\n          })}\n        </select>\n        <select className={`task-${rowIdx}`} name=\"task\" value={rowTask} onChange={(e) => this.handleChangeTask(e, rowIdx, rowPhase)}>\n          {tasks.map(function(task: string, i: number) {\n            return <option key={i}>{task}</option>\n          })}\n        </select>\n        {rowTask && \n          <>\n            <textarea className={`description-${rowIdx}`} style={{resize: \"none\"}} name=\"description\" value={rowStatus.description as string} onChange={(e) => this.handleChangeDescription(e, rowIdx, rowPhase, rowTask, 'description')}/>\n            <input className={`blocked-${rowIdx}`} type=\"checkbox\" name=\"blocked\" checked={rowStatus.blocked as boolean} onChange={(e) => this.handleChangeStatus(rowIdx, rowPhase, rowTask, 'blocked')}/>\n            <input className={`checkbox-${rowIdx}`} type=\"checkbox\" name=\"help\" checked={rowStatus.help as boolean} onChange={(e) => this.handleChangeStatus(rowIdx, rowPhase, rowTask, 'help')}/>\n          </>\n        }\n      </div>\n    )\n  } \n\n  render() {\n    const { formData } = this.state\n\n    return (\n      <div className=\"App\">\n        <div className=\"labels grid\">\n          <label>Phase</label>\n          <label>Task</label>\n          <label>Description</label>\n          <label>Blocked</label>\n          <label>Help</label>\n        </div>\n        <form className=\"form\">\n          {formData.length > 0 && formData.map((rowData: IPhase, i: number) => this.renderRow(rowData, i))}\n        </form>\n        {this.renderNewRow()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import mockData from './mockData.json'\n\nReactDOM.render(<App formData={[]} />, document.getElementById('root'));\n\n"],"sourceRoot":""}